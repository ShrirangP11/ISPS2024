library(readr)
library(dplyr)
library(IncDTW)
# Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
path="C:/Users/ShrirangP/Desktop/normalized.csv"
values <- read_csv(path, col_names = FALSE, trim_ws = FALSE)
View(values)
count = values[1,] %>% as.numeric()
localMaxima <- function(x) {
# Use -Inf instead if x is numeric (non-integer)
y <- diff(c(-.Machine$integer.max, x)) > 0L
rle(y)$lengths
y <- cumsum(rle(y)$lengths)
y <- y[seq.int(1L, length(y), 2L)]
if (x[[1]] == x[[2]]) {
y <- y[-1]
}
y
}
localMinima <- function(x) {
# Use -Inf instead if x is numeric (non-integer)
y <- diff(c(-.Machine$integer.max, x)) < 0L
rle(y)$lengths
y <- cumsum(rle(y)$lengths)
y <- y[seq.int(1L, length(y), 2L)]
if (x[[1]] == x[[2]]) {
y <- y[-1]
}
y
}
#Uses functions defined above
maxima = count[localMaxima(count)]
Gt1 = which(count %in% maxima[which(maxima>1)])
minima = count[localMinima(count)]
Lt1 = which(count %in% minima[which(minima*(-1)>1)])
#Uses IncDTW library
max = count[find_peaks(count, 2, get_min = F, strict = F)]
Gt1_ = which(count %in% max[which(max>1)])
min = count[find_peaks(count, 2, get_min = T, strict = F)]
Lt1_ = which(count %in% min[which(min*(-1)>1)])
plot(count,ylim=c(-3,5),type='l')
plot(count,type='l')
abline(h=c(-1,1),col='red')
points(Gt1,count[Gt1],col='blue')
plot(count,type='l')
abline(h=c(-1,1),col='red')
# Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
path="C:/Users/ShrirangP/Desktop/normalized.csv"
values <- read_csv(path, col_names = FALSE, trim_ws = FALSE)
View(values)
count = values[1,] %>% as.numeric()
#Uses functions defined above
maxima = count[localMaxima(count)]
Gt1 = which(count %in% maxima[which(maxima>1)])
minima = count[localMinima(count)]
Lt1 = which(count %in% minima[which(minima*(-1)>1)])
#Uses IncDTW library
max = count[find_peaks(count, 2, get_min = F, strict = F)]
Gt1_ = which(count %in% max[which(max>1)])
min = count[find_peaks(count, 2, get_min = T, strict = F)]
Lt1_ = which(count %in% min[which(min*(-1)>1)])
plot(count,type='l')
abline(h=c(-1,1),col='red')
points(Gt1,count[Gt1],col='blue')
points(Lt1,count[Lt1],col='green')
plot(count[1:92*5],type='l')
abline(h=c(-1,1),col='red')
points(Gt1,count[Gt1],col='blue')
points(Lt1,count[Lt1],col='green')
points(Gt1_,count[Gt1_],col='blue')
plot(count[92*30:92*40],type='l')
plot(count[92*30:92*40-1],type='l')
plot(count[92*30:92*39],type='l')
plot(count[92*20:92*39],type='l')
plot(count[92*20:92*25],type='l')
plot(count[-920],type='l')
abline(h=c(-1,1),col='red')
plot(count[2760:3680],type='l')
abline(h=c(-1,1),col='red')
points(Gt1,count[Gt1],col='blue')
plot(count[2760:3680],type='l')
abline(h=c(-1,1),col='red')
plot(count,type='l')
abline(h=c(-1,1),col='red')
points(Gt1,count[Gt1],col='blue')
points(Lt1,count[Lt1],col='green')
plot(count,type='l')
abline(h=c(-1,1),col='red')
points(Gt1_,count[Gt1_],col='blue')
points(Lt1_,count[Lt1_],col='green')
length(count)
plot(count[1:92*2],type='l')
abline(h=c(-1,1),col='red')
dat <- data.frame(
x = 1:length(count),
y = count
)
approxData <- data.frame(
with(dat,
approx(x, y, xout = seq(1, n, by = 10), method = "linear")
),
method = "approx()"
)
splineData <- data.frame(
with(dat,
spline(x, y, xout = seq(1, n, by = 10))
),
method = "spline()"
)
smoothData <- data.frame(
x = 1:n,
y = as.vector(smooth(dat$y)),
method = "smooth()"
)
loessData <- data.frame(
x = 1:n,
y = predict(loess(y~x, dat, span = 0.1)),
method = "loess()"
)
# Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
path="C:/Users/ShrirangP/Desktop/normalized.csv"
values <- read_csv(path, col_names = FALSE, trim_ws = FALSE)
# View(values)
count = values[1,] %>% as.numeric()
dat <- data.frame(
x = 1:length(count),
y = count
)
approxData <- data.frame(
with(dat,
approx(x, y, xout = seq(1, n, by = 10), method = "linear")
),
method = "approx()"
)
loessData <- data.frame(
x = 1:n,
y = predict(loess(y~x, dat, span = 0.1)),
method = "loess()"
)
loessData <- data.frame(
x = 1:length(count),
y = predict(loess(y~x, dat, span = 0.1)),
method = "loess()"
)
library(ggplot2)
ggplot(rbind(approxData, splineData, smoothData, loessData), aes(x, y)) +
geom_point(dat = dat, aes(x, y), alpha = 0.2, col = "red") +
geom_line(col = "blue") +
facet_wrap(~method) +
ggtitle("Interpolation and smoothing functions in R") +
theme_bw(16)
n=length(count)
dat <- data.frame(
x = 1:n,
y = count
)
approxData <- data.frame(
with(dat,
approx(x, y, xout = seq(1, n, by = 10), method = "linear")
),
method = "approx()"
)
splineData <- data.frame(
with(dat,
spline(x, y, xout = seq(1, n, by = 10))
),
method = "spline()"
)
smoothData <- data.frame(
x = 1:n,
y = as.vector(smooth(dat$y)),
method = "smooth()"
)
loessData <- data.frame(
x = 1:n,
y = predict(loess(y~x, dat, span = 0.1)),
method = "loess()"
)
library(ggplot2)
ggplot(rbind(approxData, splineData, smoothData, loessData), aes(x, y)) +
geom_point(dat = dat, aes(x, y), alpha = 0.2, col = "red") +
geom_line(col = "blue") +
facet_wrap(~method) +
ggtitle("Interpolation and smoothing functions in R") +
theme_bw(16)
# Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
path="C:/Users/ShrirangP/Desktop/normalized.csv"
values <- read_csv(path, col_names = FALSE, trim_ws = FALSE)
# View(values)
count = values[1,] %>% as.numeric()
n=length(count)
dat <- data.frame(
x = 1:n,
y = count
)
approxData <- data.frame(
with(dat,
approx(x, y, xout = seq(1, n, by = 10), method = "linear")
),
method = "approx()"
)
splineData <- data.frame(
with(dat,
spline(x, y, xout = seq(1, n, by = 10))
),
method = "spline()"
)
smoothData <- data.frame(
x = 1:n,
y = as.vector(smooth(dat$y)),
method = "smooth()"
)
loessData <- data.frame(
x = 1:n,
y = predict(loess(y~x, dat, span = 0.1)),
method = "loess()"
)
ggplot(rbind(approxData, splineData, smoothData, loessData), aes(x, y)) +
geom_point(dat = dat, aes(x, y), alpha = 0.2, col = "red") +
geom_line(col = "blue") +
facet_wrap(~method) +
ggtitle("Interpolation and smoothing functions in R") +
theme_bw(16)
#Uses functions defined above
maxima = count[localMaxima(count)]
Gt1 = which(count %in% maxima[which(maxima>1)])
minima = count[localMinima(count)]
Lt1 = which(count %in% minima[which(minima*(-1)>1)])
#Uses IncDTW library
max = count[find_peaks(count, 2, get_min = F, strict = F)]
Gt1_ = which(count %in% max[which(max>1)])
min = count[find_peaks(count, 2, get_min = T, strict = F)]
Lt1_ = which(count %in% min[which(min*(-1)>1)])
plot(count[1:92*2],type='l')
abline(h=c(-1,1),col='red')
points(Gt1_,count[Gt1_],col='blue')
points(Lt1_,count[Lt1_],col='green')
plot(count,type='l')
abline(h=c(-1,1),col='red')
points(Gt1_,count[Gt1_],col='blue')
points(Lt1_,count[Lt1_],col='green')
plot(count[1:100],type='l')
abline(h=c(-1,1),col='red')
