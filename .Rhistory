library(readr)
library(dplyr)
library(IncDTW)
# Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
path="C:/Users/ShrirangP/Desktop/normalized.csv"
values <- read_csv(path, col_names = FALSE, trim_ws = FALSE)
View(values)
count = values[1,] %>% as.numeric()
localMaxima <- function(x) {
# Use -Inf instead if x is numeric (non-integer)
y <- diff(c(-.Machine$integer.max, x)) > 0L
rle(y)$lengths
y <- cumsum(rle(y)$lengths)
y <- y[seq.int(1L, length(y), 2L)]
if (x[[1]] == x[[2]]) {
y <- y[-1]
}
y
}
localMinima <- function(x) {
# Use -Inf instead if x is numeric (non-integer)
y <- diff(c(-.Machine$integer.max, x)) < 0L
rle(y)$lengths
y <- cumsum(rle(y)$lengths)
y <- y[seq.int(1L, length(y), 2L)]
if (x[[1]] == x[[2]]) {
y <- y[-1]
}
y
}
#Uses functions defined above
maxima = count[localMaxima(count)]
Gt1 = which(count %in% maxima[which(maxima>1)])
minima = count[localMinima(count)]
Lt1 = which(count %in% minima[which(minima*(-1)>1)])
#Uses IncDTW library
max = count[find_peaks(count, 2, get_min = F, strict = F)]
Gt1_ = which(count %in% max[which(max>1)])
min = count[find_peaks(count, 2, get_min = T, strict = F)]
Lt1_ = which(count %in% min[which(min*(-1)>1)])
plot(count,ylim=c(-3,5),type='l')
plot(count,type='l')
abline(h=c(-1,1),col='red')
points(Gt1,count[Gt1],col='blue')
plot(count,type='l')
abline(h=c(-1,1),col='red')
# Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
path="C:/Users/ShrirangP/Desktop/normalized.csv"
values <- read_csv(path, col_names = FALSE, trim_ws = FALSE)
View(values)
count = values[1,] %>% as.numeric()
#Uses functions defined above
maxima = count[localMaxima(count)]
Gt1 = which(count %in% maxima[which(maxima>1)])
minima = count[localMinima(count)]
Lt1 = which(count %in% minima[which(minima*(-1)>1)])
#Uses IncDTW library
max = count[find_peaks(count, 2, get_min = F, strict = F)]
Gt1_ = which(count %in% max[which(max>1)])
min = count[find_peaks(count, 2, get_min = T, strict = F)]
Lt1_ = which(count %in% min[which(min*(-1)>1)])
plot(count,type='l')
abline(h=c(-1,1),col='red')
points(Gt1,count[Gt1],col='blue')
points(Lt1,count[Lt1],col='green')
plot(count[1:92*5],type='l')
abline(h=c(-1,1),col='red')
points(Gt1,count[Gt1],col='blue')
points(Lt1,count[Lt1],col='green')
points(Gt1_,count[Gt1_],col='blue')
plot(count[92*30:92*40],type='l')
plot(count[92*30:92*40-1],type='l')
plot(count[92*30:92*39],type='l')
plot(count[92*20:92*39],type='l')
plot(count[92*20:92*25],type='l')
plot(count[-920],type='l')
abline(h=c(-1,1),col='red')
plot(count[2760:3680],type='l')
abline(h=c(-1,1),col='red')
points(Gt1,count[Gt1],col='blue')
plot(count[2760:3680],type='l')
abline(h=c(-1,1),col='red')
plot(count,type='l')
abline(h=c(-1,1),col='red')
points(Gt1,count[Gt1],col='blue')
points(Lt1,count[Lt1],col='green')
plot(count,type='l')
abline(h=c(-1,1),col='red')
points(Gt1_,count[Gt1_],col='blue')
points(Lt1_,count[Lt1_],col='green')
length(count)
plot(count[1:92*2],type='l')
abline(h=c(-1,1),col='red')
dat <- data.frame(
x = 1:length(count),
y = count
)
approxData <- data.frame(
with(dat,
approx(x, y, xout = seq(1, n, by = 10), method = "linear")
),
method = "approx()"
)
splineData <- data.frame(
with(dat,
spline(x, y, xout = seq(1, n, by = 10))
),
method = "spline()"
)
smoothData <- data.frame(
x = 1:n,
y = as.vector(smooth(dat$y)),
method = "smooth()"
)
loessData <- data.frame(
x = 1:n,
y = predict(loess(y~x, dat, span = 0.1)),
method = "loess()"
)
# Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
path="C:/Users/ShrirangP/Desktop/normalized.csv"
values <- read_csv(path, col_names = FALSE, trim_ws = FALSE)
# View(values)
count = values[1,] %>% as.numeric()
dat <- data.frame(
x = 1:length(count),
y = count
)
approxData <- data.frame(
with(dat,
approx(x, y, xout = seq(1, n, by = 10), method = "linear")
),
method = "approx()"
)
loessData <- data.frame(
x = 1:n,
y = predict(loess(y~x, dat, span = 0.1)),
method = "loess()"
)
loessData <- data.frame(
x = 1:length(count),
y = predict(loess(y~x, dat, span = 0.1)),
method = "loess()"
)
library(ggplot2)
ggplot(rbind(approxData, splineData, smoothData, loessData), aes(x, y)) +
geom_point(dat = dat, aes(x, y), alpha = 0.2, col = "red") +
geom_line(col = "blue") +
facet_wrap(~method) +
ggtitle("Interpolation and smoothing functions in R") +
theme_bw(16)
n=length(count)
dat <- data.frame(
x = 1:n,
y = count
)
approxData <- data.frame(
with(dat,
approx(x, y, xout = seq(1, n, by = 10), method = "linear")
),
method = "approx()"
)
splineData <- data.frame(
with(dat,
spline(x, y, xout = seq(1, n, by = 10))
),
method = "spline()"
)
smoothData <- data.frame(
x = 1:n,
y = as.vector(smooth(dat$y)),
method = "smooth()"
)
loessData <- data.frame(
x = 1:n,
y = predict(loess(y~x, dat, span = 0.1)),
method = "loess()"
)
library(ggplot2)
ggplot(rbind(approxData, splineData, smoothData, loessData), aes(x, y)) +
geom_point(dat = dat, aes(x, y), alpha = 0.2, col = "red") +
geom_line(col = "blue") +
facet_wrap(~method) +
ggtitle("Interpolation and smoothing functions in R") +
theme_bw(16)
# Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
path="C:/Users/ShrirangP/Desktop/normalized.csv"
values <- read_csv(path, col_names = FALSE, trim_ws = FALSE)
# View(values)
count = values[1,] %>% as.numeric()
n=length(count)
dat <- data.frame(
x = 1:n,
y = count
)
approxData <- data.frame(
with(dat,
approx(x, y, xout = seq(1, n, by = 10), method = "linear")
),
method = "approx()"
)
splineData <- data.frame(
with(dat,
spline(x, y, xout = seq(1, n, by = 10))
),
method = "spline()"
)
smoothData <- data.frame(
x = 1:n,
y = as.vector(smooth(dat$y)),
method = "smooth()"
)
loessData <- data.frame(
x = 1:n,
y = predict(loess(y~x, dat, span = 0.1)),
method = "loess()"
)
ggplot(rbind(approxData, splineData, smoothData, loessData), aes(x, y)) +
geom_point(dat = dat, aes(x, y), alpha = 0.2, col = "red") +
geom_line(col = "blue") +
facet_wrap(~method) +
ggtitle("Interpolation and smoothing functions in R") +
theme_bw(16)
#Uses functions defined above
maxima = count[localMaxima(count)]
Gt1 = which(count %in% maxima[which(maxima>1)])
minima = count[localMinima(count)]
Lt1 = which(count %in% minima[which(minima*(-1)>1)])
#Uses IncDTW library
max = count[find_peaks(count, 2, get_min = F, strict = F)]
Gt1_ = which(count %in% max[which(max>1)])
min = count[find_peaks(count, 2, get_min = T, strict = F)]
Lt1_ = which(count %in% min[which(min*(-1)>1)])
plot(count[1:92*2],type='l')
abline(h=c(-1,1),col='red')
points(Gt1_,count[Gt1_],col='blue')
points(Lt1_,count[Lt1_],col='green')
plot(count,type='l')
abline(h=c(-1,1),col='red')
points(Gt1_,count[Gt1_],col='blue')
points(Lt1_,count[Lt1_],col='green')
plot(count[1:100],type='l')
abline(h=c(-1,1),col='red')
date_series <- seq(as.Date("1951-01-01"), as.Date("2023-12-31"), by = "day")
data = read.csv("daily_rainfall.csv",header = FALSE)
getwd()
data = read.csv("D:/Bharat/College/SPPU Material/SPPU Stuff/ISPS Competiton/EVT/daily_rainfall_pune.csv",header = FALSE)
d = as.data.frame(t(data))
rf_series <- data.frame(
Date = date_series,
Value = d$V1
)
View(rf_series)
time <- matrix(ncol=2,nrow=length(rf_series$Value))
time[,1] <- seq(1,length(rf_series$Value),1)
time[,2] <- seq(1,length(rf_series$Value),1)^2
GP1 <- fevd(rf_series$Value,threshold = 204.5,scale.fun=~time[,1], type=c('GP'), units='mm',use.phi=TRUE)
library(ismev)
library(evd)
time <- matrix(ncol=2,nrow=length(rf_series$Value))
time[,1] <- seq(1,length(rf_series$Value),1)
time[,2] <- seq(1,length(rf_series$Value),1)^2
GP1 <- fevd(rf_series$Value,threshold = 204.5,scale.fun=~time[,1], type=c('GP'), units='mm',use.phi=TRUE)
library(extRemes)
GP1 <- fevd(rf_series$Value,threshold = 204.5,scale.fun=~time[,1], type=c('GP'), units='mm',use.phi=TRUE)
plot(GP1,type=c('rl'), rperiods = c(5, 10, 20,50),period='year',main='Return Level')
GP2 <- fevd(rf_series$Value,threshold = 204.5,scale.fun=~time[,1] + time[,2], type=c('GP'), units='mm',use.phi=TRUE)
plot(GP2,type=c('rl'), rperiods = c(5, 10, 20,50),period='year',main='Return Level')
library(ismev)
library(evd)
library(extRemes)
library(ggplot2)
library(ggpubr)
setwd('C:/Users/Bharat Jambhulkar/ISPS2024')
data<-read.csv('daily_rainfall_pune.csv',header=FALSE)
values<-unlist(data[1,], use.names=F)
x<-ts(values,freq=365)
year<-c(1:73)
annual_maximum <- as.numeric(aggregate(x, FUN=max))
#Fitting various Stationary and Non-Stationary GEV models
time <- matrix(ncol=2,nrow=73)
time[,1] <- seq(1,73,1)
time[,2] <- seq(1,73,1)^2
GEV00 <- fevd(annual_maximum, type=c('GEV'), units='mm')
plot(GEV00)
GEV10 <- fevd(annual_maximum, location.fun=~time[,1], type=c('GEV'), units='mm')
plot(GEV10,type=c('density'), rperiods = c(5, 10, 20,50),period='year',ylim=c(0,0.5),main='Density Plot')
plot(GEV10,type=c('rl'), rperiods = c(5, 10, 20,50),period='year', main='Return Level')
GEV01 <- fevd(annual_maximum, scale.fun=~time[,1], type=c('GEV'), units='mm',use.phi=TRUE)
plot(GEV01,type=c('density'), rperiods = c(5, 10, 20,50),period='year',ylim=c(0,0.5),main='Density Plot')
plot(GEV01,type=c('rl'), rperiods = c(5, 10, 20,50),period='year',main='Return Level')
GEV11 <- fevd(annual_maximum, scale.fun=~time[,1], location.fun=~time[,1], type=c('GEV'), units='mm',use.phi=TRUE)
plot(GEV11,type=c('density'), rperiods = c(5, 10, 20,50),period='year',ylim=c(0,0.5),main='Density Plot')
plot(GEV11,type=c('rl'), rperiods = c(5, 10, 20,50),period='year',main='Return Level')
GEV20 <- fevd(annual_maximum,location.fun=~time[,1] + time[,2], type=c('GEV'), units='mm')
plot(GEV20,type=c('density'), rperiods = c(5, 10, 20,50),period='year',ylim=c(0,0.5),main='Density Plot')
plot(GEV20,type=c('rl'), rperiods = c(5, 10, 20,50),period='year',main='Return Level')
GEV02 <- fevd(annual_maximum,scale.fun=~time[,1] + time[,2], type=c('GEV'), units='mm',use.phi=TRUE)
GEV12 <- fevd(annual_maximum,location.fun=~time[,1],scale.fun=~time[,1] + time[,2], type=c('GEV'), units='mm',use.phi=TRUE)
GEV21 <- fevd(annual_maximum,location.fun=~time[,1] + time[,2],scale.fun=~time[,1], type=c('GEV'), units='mm',use.phi=TRUE)
GEV22 <- fevd(annual_maximum,location.fun=~time[,1] + time[,2],scale.fun=~time[,1] + time[,2], type=c('GEV'), units='mm',use.phi=TRUE)
GP1 <- fevd(annual_maximum,threshold = 204.5,scale.fun=~time[,1], type=c('GP'), units='mm',use.phi=TRUE)
plot(GP1,type=c('rl'), rperiods = c(5, 10, 20,50),period='year',main='Return Level')
GP1 <- fevd(x,threshold = 204.5,scale.fun=~time[,1], type=c('GP'), units='mm',use.phi=TRUE)
View(x)
library(dplyr)
library(ismev)
date_series <- seq(as.Date("1951-01-01"), as.Date("2023-12-31"), by = "day")
data = read.csv("D:/Bharat/College/SPPU Material/SPPU Stuff/ISPS Competiton/EVT/daily_rainfall.csv",header = FALSE)
d = as.data.frame(t(data))
View(d)
rf_series <- data.frame(
Date = date_series,
Value = d$V1
)
ppfit <- gev.fit(rf_series[,2])
GP1 <- fevd(rf_series$Value,threshold = 204.5,scale.fun=~time[,1], type=c('GP'), units='mm',use.phi=TRUE)
plot(GP1,type=c('rl'), rperiods = c(5, 10, 20,50),period='year',main='Return Level')
library(ismev)
library(evd)
library(extRemes)
date_series <- seq(as.Date("1951-01-01"), as.Date("2023-12-31"), by = "day")
data = read.csv("D:/Bharat/College/SPPU Material/SPPU Stuff/ISPS Competiton/EVT/daily_rainfall_pune.csv",header = FALSE)
d = as.data.frame(t(data))
rf_series <- data.frame(
Date = date_series,
Value = d$V1
)
gc()
time <- matrix(ncol=2,nrow=length(rf_series$Value))
time[,1] <- seq(1,length(rf_series$Value),1)
time[,2] <- seq(1,length(rf_series$Value),1)^2
GP1 <- fevd(rf_series$Value,threshold = 204.5,scale.fun=~time[,1], type=c('GP'), units='mm',use.phi=TRUE)
plot(GP1,type=c('rl'), rperiods = c(5, 10, 20,50),period='year',main='Return Level')
library(ismev)
library(evd)
library(extRemes)
date_series <- seq(as.Date("1951-01-01"), as.Date("2023-12-31"), by = "day")
data = read.csv("D:/Bharat/College/SPPU Material/SPPU Stuff/ISPS Competiton/EVT/daily_rainfall_pune.csv",header = FALSE)
d = as.data.frame(t(data))
rf_series <- data.frame(
Date = date_series,
Value = d$V1
)
View(rf_series)
rf_series[0]
rf_series[0,1]
rf_series$Value[0]
rf_series$Value[1]
rf_series$Value[2]
26663*0.8
#26663*0.8 = 21330.4
rf_series.80% <- rf_series[1:21330]
#26663*0.8 = 21330.4
rf_series.80% <- rf_series$Value[1:21330]
rf_series$Value[1:2]
rf_series$Value[1:10]
#26663*0.8 = 21330.4
rf_series.80 <- rf_series$Value[1:21330]
#get time values
time <- matrix(ncol=2,nrow=length(rf_series$Value))
time[,1] <- seq(1,length(rf_series$Value),1)
time[,2] <- seq(1,length(rf_series$Value),1)^2
time.80<-matrix(ncol=2,nrow=length(rf_series.80))
View(rf_series.80)
length(rf_series.80)
time.80<-matrix(ncol=2,nrow=length(rf_series.80))
time.80[,1]<-seq(1,length(rf_series.80),1)
time.80[,1]<-seq(1,length(rf_series.80),1)^2
GP1 <- fevd(rf_series$Value,threshold = 204.5,scale.fun=~time[,1], type=c('GP'), units='mm',use.phi=TRUE)
GP1
GP1$par.models
GP1
time.80[,1]<-seq(1,length(rf_series.80),1)
time.80[,2]<-seq(1,length(rf_series.80),1)^2
GP1.80<-fevd(rf_series.80,threshold = 204.5,scale.fun=~time.80[,1], type=c('GP'), units='mm',use.phi=TRUE)
GP1.80
round(c(3.906380e+00  1.464915e-05 -7.205860e-02),4)
round(c(3.906380e+00  1.464915e-05 -7.205860e-02),4)
3.906380e+00-3.822947e+00
26683-21330
5353/365.4
5353/365
GP2 <- fevd(rf_series$Value,threshold = 204.5,scale.fun=~time[,1] + time[,2], type=c('GP'), units='mm',use.phi=TRUE)
GP2
GP2.80<-fevd(rf_series.80,threshold = 204.5,scale.fun=~time.80[,1] +time.80[,2], type=c('GP'), units='mm',use.phi=TRUE)
GP2.80
round(3.900253e+00,6)
round(3.900253e+00,6)-round(3.822947e+00,6)
round(5.091269e-05,6)
round(5.091269e-05)
round(5.091269e-05,4)
round(5.091269e-05,8)
2.862413e-05 == 0.000002862413
# Checking the probabiltiy of 3 years return value
sigmahat = exp(3.822947+5.1e-05*t[,1])
# Checking the probabiltiy of 3 years return value
sigmahat = exp(3.822947+5.1e-05*time.80[,1])
round(-1.028830e-01,6)
GP1.80
?gpd.fit
gpd.fit(rf_series.80,threshold=204.5,ydat=time.80,sigl=1,siglink="exp")
gpd.fit(rf_series.80,threshold=204.5,ydat=time.80,sigl=1,siglink=exp)
round(-1.032903e-01,6)
Z<-function(r){
return(threshold+(sigmahat/(-0.102883))*(r*365.25*0.01819)^-0.102883 -1)
}
Z(3)
threshold=204.5
Z<-function(r){
return(threshold+(sigmahat/(-0.102883))*(r*365.25*0.01819)^-0.102883 -1)
}
Z(3)
plot(x=time.80[,1],y=Z(3))
sigmahat
plot(x=seq(1:20330),y=sigmahat)
plot(y=sigmahat)
plot(sigmahat)
gpd.fit(rf_series.80,threshold=204.5,ydat=time.80,sigl=1,siglink=exp)
gpd.fit(rf_series.80,threshold=204.5)
threshold=204.5
Z<-function(r){
return(threshold+(59.68574756/(-0.04539045))*(r*365.25*0.01819)^(-0.04539045) -1)
}
Z(3)
Z<-function(r){
return(threshold+(59.68574756/(-0.04539045))*((r*365.25*0.01819)^(-0.04539045) -1))
}
Z(3)
test = rf_series[21330:21330+1096]
test = rf_series$Value[21330:21330+1096]
test
21330+1096
test = rf_series$Value[21330:22426]
test
Z(3)
length(test)
which(test>371.5005)
length(which(test>371.5005))
length(which(test>371.5005))/length(test)
1/3
Z(5) #level = 371.5005
length(which(test>397.8111))
Z(10) #level = 371.5005  397.8111
length(which(test>432.5507))
Z(5) #level = 371.5005  397.8111
21330+1825
test = rf_series$Value[21330:23155]
length(which(test>432.5507))
length(which(test> 397.8111))
test = rf_series$Value[21330:24983]
Z(10) #level = 371.5005  397.8111
length(which(test> 432.5507))
test = rf_series$Value[21330:]
test = rf_series$Value[21330: ]
test = rf_series$Value[21330:26663]
length(which(test> 432.5507))
Z(15) #level = 371.5005  397.8111
Z(13) #level = 371.5005  397.8111
length(which(test> 445.4176))
Z(3) #level = 371.5005  397.8111
test = rf_series$Value[21330:21330+1096]
length(which(test> 371.5005))
test = rf_series$Value[21330:(21330+1096)]
length(which(test> 371.5005))
test = rf_series$Value[(21330+1096):(21330+1096)+1096]
length(which(test> 371.5005))
Z(3) #level = 371.5005  397.8111
plot(GP1.80)
plot(GP1.80,type=c('rl'), rperiods = c(3,5, 10),period='year',main='Return Level')
GP.80 <-fevd(rf_series$Value,threshold = 204.5,type=c('GP'), units='mm',use.phi=TRUE)
plot(GP.80,type=c('rl'), rperiods = c(3,5, 10),period='year',main='Return Level')
Z(5)
GP.80
Z<-function(r){
return(threshold+(59.83000192/(-0.04955955))*((r*365.25*0.01819)^(-0.04955955) -1))
}
Z(5)
abline(h=380)
test = rf_series$Value[21330:(21330+1826)]
length(which(test> 381))
abline(h=390)
length(which(test> 396.9073))
date_series <- seq(as.Date("1951-01-01"), as.Date("2023-12-31"), by = "day")
data = read.csv("D:/Bharat/College/SPPU Material/SPPU Stuff/ISPS Competiton/EVT/daily_rainfall_pune.csv",header = FALSE)
d = as.data.frame(t(data))
rf_series <- data.frame(
Date = date_series,
Value = d$V1
)
# Load necessary libraries
library(dplyr)
# Convert date column to Date type if it's not already
rf_series$Date <- as.Date(rf_series$Date)
# Specify your threshold
threshold <- 204.5  # Change this to your desired threshold
# Convert date column to Date type if it's not already
rf_series$Date <- as.Date(rf_series$Date)
# Extract year from date and count occurrences of crossing the threshold
threshold_crossings <- rf_series %>%
mutate(year = format(date, "%Y"),  # Extract year from date
crossed_threshold = ifelse(rainfall > threshold, 1, 0)) %>%  # Check if threshold is crossed
group_by(year) %>%  # Group by year
summarise(crossings = sum(crossed_threshold))  # Count crossings per year
# Print the results
print(threshold_crossings)
# Extract year from date and count occurrences of crossing the threshold
threshold_crossings <- rf_series %>%
mutate(year = format(date, "%Y"),  # Extract year from date
crossed_threshold = ifelse(rainfall > threshold, 1, 0)) %>%  # Check if threshold is crossed
group_by(year) %>%  # Group by year
summarise(crossings = sum(crossed_threshold))  # Count crossings per year
