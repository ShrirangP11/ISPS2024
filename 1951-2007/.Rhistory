round(sum(res))
var(res)
1/var(res)
qqnorm(res)
qqline(res)
#shapiro-Wilk test
shapiro.test(res)
plot(res)
acf(res)
#residuals vs fitted Y plot
plot(Yhat,res)
which(abs(res)>1500)
library(readr)
library(dplyr)
library(IncDTW)
library(ggplot2)
# Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
path="C:/Users/ShrirangP/Desktop/normalized.csv"
values <- read_csv(path, col_names = FALSE, trim_ws = FALSE)
# View(values)
count = values[1,] %>% as.numeric()
localMaxima <- function(x) {
# Use -Inf instead if x is numeric (non-integer)
y <- diff(c(-.Machine$integer.max, x)) > 0L
rle(y)$lengths
y <- cumsum(rle(y)$lengths)
y <- y[seq.int(1L, length(y), 2L)]
if (x[[1]] == x[[2]]) {
y <- y[-1]
}
y
}
localMinima <- function(x) {
# Use -Inf instead if x is numeric (non-integer)
y <- diff(c(-.Machine$integer.max, x)) < 0L
rle(y)$lengths
y <- cumsum(rle(y)$lengths)
y <- y[seq.int(1L, length(y), 2L)]
if (x[[1]] == x[[2]]) {
y <- y[-1]
}
y
}
#Uses functions defined above
maxima = count[localMaxima(count)]
Gt1 = which(count %in% maxima[which(maxima>1)])
minima = count[localMinima(count)]
Lt1 = which(count %in% minima[which(minima*(-1)>1)])
#Uses IncDTW library
max = count[find_peaks(count, 2, get_min = F, strict = F)]
Gt1_ = which(count %in% max[which(max>1)])
min = count[find_peaks(count, 2, get_min = T, strict = F)]
Lt1_ = which(count %in% min[which(min*(-1)>1)])
plot(count[1:100],type='l')
plot(count,type='l')
abline(h=c(-1,1),col='red')
points(Gt1_,count[Gt1_],col='blue')
points(Lt1_,count[Lt1_],col='green')
plot(count[1:200],type='l')
abline(h=c(-1,1),col='red')
n=length(count)
dat <- data.frame(
x = 1:n,
y = count
)
approxData <- data.frame(
with(dat,
approx(x, y, xout = seq(1, n, by = 10), method = "linear")
),
method = "approx()"
)
splineData <- data.frame(
with(dat,
spline(x, y, xout = seq(1, n, by = 10))
),
method = "spline()"
)
smoothData <- data.frame(
x = 1:n,
y = as.vector(smooth(dat$y)),
method = "smooth()"
)
loessData <- data.frame(
x = 1:n,
y = predict(loess(y~x, dat, span = 0.1)),
method = "loess()"
)
ggplot(rbind(approxData, splineData, smoothData, loessData), aes(x, y)) +
geom_point(dat = dat, aes(x, y), alpha = 0.2, col = "red") +
geom_line(col = "blue") +
facet_wrap(~method) +
ggtitle("Interpolation and smoothing functions in R") +
theme_bw(16)
# Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
path="C:/Users/ShrirangP/Desktop/normalized.csv"
values <- read_csv(path, col_names = FALSE, trim_ws = FALSE)
# View(values)
count = values[1,] %>% as.numeric()
#Uses functions defined above
maxima = count[localMaxima(count)]
Gt1 = which(count %in% maxima[which(maxima>1)])
minima = count[localMinima(count)]
Lt1 = which(count %in% minima[which(minima*(-1)>1)])
#Uses IncDTW library
max = count[find_peaks(count, 2, get_min = F, strict = F)]
Gt1_ = which(count %in% max[which(max>1)])
min = count[find_peaks(count, 2, get_min = T, strict = F)]
Lt1_ = which(count %in% min[which(min*(-1)>1)])
plot(count[1:200],type='l')
plot(count,type='l')
# Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
path="C:/Users/ShrirangP/Desktop/normalized_1951-80_July-August.csv"
values <- read_csv(path, col_names = FALSE, trim_ws = FALSE)
# View(values)
count = values[1,] %>% as.numeric()
#Uses functions defined above
maxima = count[localMaxima(count)]
Gt1 = which(count %in% maxima[which(maxima>1)])
minima = count[localMinima(count)]
Lt1 = which(count %in% minima[which(minima*(-1)>1)])
#Uses IncDTW library
max = count[find_peaks(count, 2, get_min = F, strict = F)]
Gt1_ = which(count %in% max[which(max>1)])
min = count[find_peaks(count, 2, get_min = T, strict = F)]
Lt1_ = which(count %in% min[which(min*(-1)>1)])
plot(count,type='l')
abline(h=c(-1,1),col='red')
points(Gt1_,count[Gt1_],col='blue')
points(Lt1_,count[Lt1_],col='green')
n=length(count)
dat <- data.frame(
x = 1:n,
y = count
)
approxData <- data.frame(
with(dat,
approx(x, y, xout = seq(1, n, by = 10), method = "linear")
),
method = "approx()"
)
splineData <- data.frame(
with(dat,
spline(x, y, xout = seq(1, n, by = 10))
),
method = "spline()"
)
smoothData <- data.frame(
x = 1:n,
y = as.vector(smooth(dat$y)),
method = "smooth()"
)
loessData <- data.frame(
x = 1:n,
y = predict(loess(y~x, dat, span = 0.1)),
method = "loess()"
)
ggplot(rbind(approxData, splineData, smoothData, loessData), aes(x, y)) +
geom_point(dat = dat, aes(x, y), alpha = 0.2, col = "red") +
geom_line(col = "blue") +
facet_wrap(~method) +
ggtitle("Interpolation and smoothing functions in R") +
theme_bw(16)
runs <- count
runs[runs<(-1)]<- -1
runs <- count
runs[runs<(-1)] <- (-1)
runs[runs>1] <- 1
runs
runs[runs<=1 && runs>= (-1)] <- 0
runs[runs<=1 && runs=> (-1)] <- 0
runs[runs<=1 || runs>= (-1)] <- 0
runs[runs<=1 | runs>= (-1)] <- 0
runs
runs <- count
runs[runs<(-1)] <- (-1)
runs[runs>1] <- 1
runs[runs<=1 & runs>= (-1)] <- 0
runs
runs <- count
runs[runs<(-1)] <- (-1)
runs[runs>1] <- 1
runs
runs[runs<1 & runs>(-1)] <- 0
runs
rle(runs)
breaks <- count[count<= (-1)] <- (-1)
breaks
breaks <- (count[count<= (-1)] <- (-1))
breaks
breaks <- (count[count<= (-1)] = (-1))
breaks
breaks <- count
breaks[breaks<= (-1)] <- (-1)
breaks
breaks[breaks>(-1)] <- 0
breaks
n=length(count)
runs
rle(breaks)
rle(breaks)$lengths
with(rle(breaks), lengths[values == -1])
break_lengths=with(rle(breaks), lengths[values == -1])
hist(break_lengths)
table <- table(break_lengths)
print(table)
n=length(count)
barplot(table)
hist(break_lengths)
lines(density(break_lengths))
hist(break_lengths,freq=F)
lines(density(break_lengths))
hist(break_lengths,freq=F,ylim=c(0,0.5))
lines(density(break_lengths))
barplot(table)
barplot(table,xlab='Break lengths',ylab='Frequency')
hist(break_lengths,freq=F,ylim=c(0,0.5),title='H')
lines(density(break_lengths))
hist(break_lengths,freq=F,ylim=c(0,0.5),main='H')
lines(density(break_lengths))
hist(break_lengths,freq=F,ylim=c(0,0.5),main='Histogram of Break lengths')
lines(density(break_lengths))
clear
barplot(table,xlab='Break lengths',ylab='Frequency')
hist(break_lengths,freq=F,ylim=c(0,0.5),main='Histogram of Break lengths')
lines(density(break_lengths))
print(table)
plot(count,type='l')
abline(h=c(-1,1),col='red')
plot(count,type='l',ylim=c(-6,6))
abline(h=c(-1,1),col='red')
points(Gt1,count[Gt1],col='blue')
library(readr)
# Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
path="C:/Users/ShrirangP/Desktop/normalized_1951-2007_July-August.csv"
values <- read_csv(path, col_names = FALSE, trim_ws = FALSE)
# View(values)
count = values[1,] %>% as.numeric()
localMaxima <- function(x) {
# Use -Inf instead if x is numeric (non-integer)
y <- diff(c(-.Machine$integer.max, x)) > 0L
rle(y)$lengths
y <- cumsum(rle(y)$lengths)
y <- y[seq.int(1L, length(y), 2L)]
if (x[[1]] == x[[2]]) {
y <- y[-1]
}
y
}
localMinima <- function(x) {
# Use -Inf instead if x is numeric (non-integer)
y <- diff(c(-.Machine$integer.max, x)) < 0L
rle(y)$lengths
y <- cumsum(rle(y)$lengths)
y <- y[seq.int(1L, length(y), 2L)]
if (x[[1]] == x[[2]]) {
y <- y[-1]
}
y
}
#Uses functions defined above
maxima = count[localMaxima(count)]
Gt1 = which(count %in% maxima[which(maxima>1)])
minima = count[localMinima(count)]
Lt1 = which(count %in% minima[which(minima*(-1)>1)])
#Uses IncDTW library
max = count[find_peaks(count, 2, get_min = F, strict = F)]
Gt1_ = which(count %in% max[which(max>1)])
min = count[find_peaks(count, 2, get_min = T, strict = F)]
Lt1_ = which(count %in% min[which(min*(-1)>1)])
plot(count,type='l',ylim=c(-6,6))
abline(h=c(-1,1),col='red')
plot(count,type='l')
abline(h=c(-1,1),col='red')
points(Gt1,count[Gt1],col='blue')
points(Lt1,count[Lt1],col='green')
plot(count,type='l')
abline(h=c(-1,1),col='red')
# points(Gt1,count[Gt1],col='blue')
# points(Lt1,count[Lt1],col='green')
points(Gt1_,count[Gt1_],col='blue')
points(Lt1_,count[Lt1_],col='green')
breaks <- count
breaks[breaks<= (-1)] <- (-1)
breaks[breaks>(-1)] <- 0
break_lengths=with(rle(breaks), lengths[values == -1])
table <- table(break_lengths)
print(table)
barplot(table,xlab='Break lengths',ylab='Frequency')
hist(break_lengths,freq=F,ylim=c(0,0.5),main='Histogram of Break lengths')
lines(density(break_lengths))
plot(count,type='l')
abline(h=c(-1,1),col='red')
# points(Gt1,count[Gt1],col='blue')
# points(Lt1,count[Lt1],col='green')
points(Gt1_,count[Gt1_],col='blue')
points(Lt1_,count[Lt1_],col='green')
plot(count[1:200],type='l')
abline(h=c(-1,1),col='red')
breaks
print(table)
30/50
library(readr)
library(dplyr)
library(IncDTW)
library(ggplot2)
# Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
path="C:/Users/ShrirangP/Desktop/normalized_1951-2007_July-August.csv"
values <- read_csv(path, col_names = FALSE, trim_ws = FALSE)
# View(values)
count = values[1,] %>% as.numeric()
localMaxima <- function(x) {
# Use -Inf instead if x is numeric (non-integer)
y <- diff(c(-.Machine$integer.max, x)) > 0L
rle(y)$lengths
y <- cumsum(rle(y)$lengths)
y <- y[seq.int(1L, length(y), 2L)]
if (x[[1]] == x[[2]]) {
y <- y[-1]
}
y
}
localMinima <- function(x) {
# Use -Inf instead if x is numeric (non-integer)
y <- diff(c(-.Machine$integer.max, x)) < 0L
rle(y)$lengths
y <- cumsum(rle(y)$lengths)
y <- y[seq.int(1L, length(y), 2L)]
if (x[[1]] == x[[2]]) {
y <- y[-1]
}
y
}
#Uses functions defined above
maxima = count[localMaxima(count)]
Gt1 = which(count %in% maxima[which(maxima>1)])
minima = count[localMinima(count)]
Lt1 = which(count %in% minima[which(minima*(-1)>1)])
#Uses IncDTW library
max = count[find_peaks(count, 2, get_min = F, strict = F)]
Gt1_ = which(count %in% max[which(max>1)])
min = count[find_peaks(count, 2, get_min = T, strict = F)]
Lt1_ = which(count %in% min[which(min*(-1)>1)])
breaks <- count
breaks[breaks<= (-1)] <- (-1)
breaks[breaks>(-1)] <- 0
breaks
rle(breaks)
library(readr)
library(dplyr)
library(IncDTW)
library(ggplot2)
# Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
path="C:/Users/ShrirangP/Desktop/normalized_1951-2007_July-August.csv"
values <- read_csv(path, col_names = FALSE, trim_ws = FALSE)
# View(values)
count = values[1,] %>% as.numeric()
localMaxima <- function(x) {
# Use -Inf instead if x is numeric (non-integer)
y <- diff(c(-.Machine$integer.max, x)) > 0L
rle(y)$lengths
y <- cumsum(rle(y)$lengths)
y <- y[seq.int(1L, length(y), 2L)]
if (x[[1]] == x[[2]]) {
y <- y[-1]
}
y
}
localMinima <- function(x) {
# Use -Inf instead if x is numeric (non-integer)
y <- diff(c(-.Machine$integer.max, x)) < 0L
rle(y)$lengths
y <- cumsum(rle(y)$lengths)
y <- y[seq.int(1L, length(y), 2L)]
if (x[[1]] == x[[2]]) {
y <- y[-1]
}
y
}
plot(count[1:62],type='l')
abline(h=c(-1,1),col='red')
plot(c(1:62),count[1:62],type='l')
abline(h=c(-1,1),col='red')
plot(x=c(1:62),y=count[1:62],type='l')
abline(h=c(-1,1),col='red')
text(x=c(1:62),y=count[1:62])
text(count[1:62])
plot(x=c(1:62),y=count[1:62],type='l')
abline(h=c(-1,1),col='red')
text(count[1:62])
count[1:62]
text(x=c(1:62),y=count[1:62],round(count[1:62],2))
plot(x=c(1:62),y=count[1:62],type='l')
abline(h=c(-1,1),col='red')
text(x=c(1:62),y=count[1:62],round(count[1:62],2))
text(x=c(1:62),y=count[1:62],round(count[1:62],2),cex=0.1)
plot(x=c(1:62),y=count[1:62],type='l')
abline(h=c(-1,1),col='red')
text(x=c(1:62),y=count[1:62],round(count[1:62],2),cex=0.1)
text(x=c(1:62),y=count[1:62],round(count[1:62],2),cex=0.4)
text(x=c(1:62),y=count[1:62],round(count[1:62],2),cex=0.6)
plot(x=c(1:62),y=count[1:62],type='l')
abline(h=c(-1,1),col='red')
text(x=c(1:62),y=count[1:62],round(count[1:62],2),cex=0.6)
text(x=c(1:62),y=count[1:62],round(count[1:62],2),cex=0.8)
plot(x=c(1:62),y=count[1:62],type='l')
abline(h=c(-1,1),col='red')
text(x=c(1:62),y=count[1:62],round(count[1:62],2),cex=0.8)
?text()
years = length(count)/62;years
days = 62
years = length(count)/days;years
setwd('C:\\Users\\ShrirangP\\Documents\\GitHub\\ISPS2024\\photos')
jpeg(file='1951.jpeg')
plot(x=c(1:62),y=count[1:62],type='l')
abline(h=c(-1,1),col='red')
text(x=c(1:62),y=count[1:62],round(count[1:62],2),cex=0.8)
ddev.off()
dev.off()
jpeg(file='1951.jpeg',width=11,height=5)
jpeg(file='1951.jpeg',width=11,height=5,unit='in')
jpeg(file='1951.jpeg',width=11,height=5,unit='px')
jpeg(file='1951.jpeg',width=1550,height=700,unit='px')
plot(x=c(1:62),y=count[1:62],type='l')
abline(h=c(-1,1),col='red')
text(x=c(1:62),y=count[1:62],round(count[1:62],2),cex=0.8)
dev.off()
days = 62
years = length(count)/days;years
for(i in 2:(years-1)){
j=i-1
x=c((62*j+1):(62*i))
y=count[x]
jpeg(file=paste0((1950+i),'.jpeg'),width=1550,height=700,unit='px')
plot(x,y,typle='l')
abline(h=c(-1,1),col='red')
text(x,y,round(y,2),cex=0.8)
dev.off()
}
years = length(count)/days;years
57*62
length(count)
days = 62
years = length(count)/days;years
for(i in 2:years){
j=i-1
x=c((62*j+1):(62*i))
y=count[x]
jpeg(file=paste0((1950+i),'.jpeg'),width=1550,height=700,unit='px')
plot(x,y,type='l')
abline(h=c(-1,1),col='red')
text(x,y,round(y,2),cex=1,)
dev.off()
}
plot(count[63:124],type='l')
plot(count[63:124],type='l')
plot(count[63:124],type='l')
plot(count[63:124],type='l')
par('mar')
par(mar=c(1,1,1,1))
plot(count[63:124],type='l')
plot(count[63:124],type='l')
par('mar')
dev.off()
plot(count[63:124],type='l')
graphics.off()
plot(count[63:124],type='l')
abline(h=c(-1,1),col='red')
text(x=c(63:124),y=count[63:124],round(count[63:124],2),cex=0.8)
plot(x=c(63:124),y=count[63:124],type='l')
abline(h=c(-1,1),col='red')
text(x=c(63:124),y=count[63:124],round(count[63:124],2),cex=0.8)
setwd('C:\\Users\\ShrirangP\\Documents\\GitHub\\ISPS2024\\photos')
days = 62
years = length(count)/days;years
for(i in 1:years){
j=i-1
x=c((62*j+1):(62*i))
y=count[x]
jpeg(file=paste0((1950+i),'.jpeg'),width=1550,height=700,unit='px')
plot(x,y,type='l')
abline(h=c(-1,1),col='red')
text(x,y,round(y,2),cex=1,)
dev.off()
}
graphics.off()
#--------------------------------------------
plot(x=c(63:124),y=count[63:124],type='l')
abline(h=c(-1,1),col='red')
# points(Gt1,count[Gt1],col='blue')
# points(Lt1,count[Lt1],col='green')
points(Gt1_,count[Gt1_],col='blue')
#Uses functions defined above
maxima = count[localMaxima(count)]
Gt1 = which(count %in% maxima[which(maxima>1)])
minima = count[localMinima(count)]
Lt1 = which(count %in% minima[which(minima*(-1)>1)])
#Uses IncDTW library
max = count[find_peaks(count, 2, get_min = F, strict = F)]
Gt1_ = which(count %in% max[which(max>1)])
min = count[find_peaks(count, 2, get_min = T, strict = F)]
Lt1_ = which(count %in% min[which(min*(-1)>1)])
# points(Gt1,count[Gt1],col='blue')
# points(Lt1,count[Lt1],col='green')
points(Gt1_,count[Gt1_],col='blue')
points(Lt1_,count[Lt1_],col='green')
#--------------------------------------------
plot(count,type='l')
abline(h=c(-1,1),col='red')
# points(Gt1,count[Gt1],col='blue')
# points(Lt1,count[Lt1],col='green')
points(Gt1_,count[Gt1_],col='blue')
points(Lt1_,count[Lt1_],col='green')
